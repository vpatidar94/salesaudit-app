import { CropperDrawSettings } from './cropper-draw-settings';
var CropperSettings = /** @class */ (function () {
    function CropperSettings(settings) {
        this.canvasWidth = 300;
        this.canvasHeight = 300;
        this.dynamicSizing = false;
        this.width = 200;
        this.height = 200;
        this.minWidth = 50;
        this.minHeight = 50;
        this.minWithRelativeToResolution = true;
        this.croppedWidth = 100;
        this.croppedHeight = 100;
        this.cropperDrawSettings = new CropperDrawSettings();
        this.touchRadius = 20;
        this.noFileInput = false;
        this.markerSizeMultiplier = 1;
        this.centerTouchRadius = 20;
        this.showCenterMarker = true;
        this.allowedFilesRegex = /\.(jpe?g|png|gif|bmp)$/i;
        this.cropOnResize = true;
        this.preserveSize = false;
        this.compressRatio = 1.0;
        // tslint:disable-next-line:variable-name
        this._rounded = false;
        // tslint:disable-next-line:variable-name
        this._keepAspect = true;
        if (typeof settings === 'object') {
            Object.assign(this, settings);
        }
    }
    Object.defineProperty(CropperSettings.prototype, "rounded", {
        get: function () {
            return this._rounded;
        },
        set: function (val) {
            this._rounded = val;
            if (val) {
                this._keepAspect = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CropperSettings.prototype, "keepAspect", {
        get: function () {
            return this._keepAspect;
        },
        set: function (val) {
            this._keepAspect = val;
            if (this._rounded === true && this._keepAspect === false) {
                console.error('Cannot set keep aspect to false on rounded cropper. Ellipsis not supported');
                this._keepAspect = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    return CropperSettings;
}());
export { CropperSettings };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JvcHBlci1zZXR0aW5ncy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pbWctY3JvcHBlci8iLCJzb3VyY2VzIjpbImxpYi9pbWFnZS1jcm9wcGVyL2Nyb3BwZXItc2V0dGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUErQjlEO0lBeUNFLHlCQUFZLFFBQTJCO1FBeENoQyxnQkFBVyxHQUFHLEdBQUcsQ0FBQztRQUNsQixpQkFBWSxHQUFHLEdBQUcsQ0FBQztRQUVuQixrQkFBYSxHQUFHLEtBQUssQ0FBQztRQUl0QixVQUFLLEdBQUcsR0FBRyxDQUFDO1FBQ1osV0FBTSxHQUFHLEdBQUcsQ0FBQztRQUViLGFBQVEsR0FBRyxFQUFFLENBQUM7UUFDZCxjQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ2YsZ0NBQTJCLEdBQUcsSUFBSSxDQUFDO1FBRW5DLGlCQUFZLEdBQUcsR0FBRyxDQUFDO1FBQ25CLGtCQUFhLEdBQUcsR0FBRyxDQUFDO1FBRXBCLHdCQUFtQixHQUF3QixJQUFJLG1CQUFtQixFQUFFLENBQUM7UUFDckUsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFDakIsZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFNcEIseUJBQW9CLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLHNCQUFpQixHQUFHLEVBQUUsQ0FBQztRQUN2QixxQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFFeEIsc0JBQWlCLEdBQVcseUJBQXlCLENBQUM7UUFDdEQsaUJBQVksR0FBRyxJQUFJLENBQUM7UUFDcEIsaUJBQVksR0FBRyxLQUFLLENBQUM7UUFFckIsa0JBQWEsR0FBRyxHQUFHLENBQUM7UUFFM0IseUNBQXlDO1FBQ2pDLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDekIseUNBQXlDO1FBQ2pDLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBR3pCLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ2hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQUVELHNCQUFJLG9DQUFPO2FBT1g7WUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdkIsQ0FBQzthQVRELFVBQVksR0FBWTtZQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQztZQUNwQixJQUFJLEdBQUcsRUFBRTtnQkFDUCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQzthQUN6QjtRQUNILENBQUM7OztPQUFBO0lBTUQsc0JBQUksdUNBQVU7YUFVZDtZQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUMxQixDQUFDO2FBWkQsVUFBZSxHQUFZO1lBQ3pCLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDO1lBQ3ZCLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxLQUFLLEVBQUU7Z0JBQ3hELE9BQU8sQ0FBQyxLQUFLLENBQ1gsNEVBQTRFLENBQzdFLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7YUFDekI7UUFDSCxDQUFDOzs7T0FBQTtJQUtILHNCQUFDO0FBQUQsQ0FBQyxBQXZFRCxJQXVFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENyb3BwZXJEcmF3U2V0dGluZ3MgfSBmcm9tICcuL2Nyb3BwZXItZHJhdy1zZXR0aW5ncyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElDcm9wcGVyU2V0dGluZ3Mge1xyXG4gIGNhbnZhc1dpZHRoPzogbnVtYmVyO1xyXG4gIGNhbnZhc0hlaWdodD86IG51bWJlcjtcclxuICBkeW5hbWljU2l6aW5nPzogYm9vbGVhbjtcclxuICBjcm9wcGVyQ2xhc3M/OiBzdHJpbmc7XHJcbiAgY3JvcHBpbmdDbGFzcz86IHN0cmluZztcclxuICB3aWR0aD86IG51bWJlcjtcclxuICBoZWlnaHQ/OiBudW1iZXI7XHJcbiAgbWluV2lkdGg/OiBudW1iZXI7XHJcbiAgbWluSGVpZ2h0PzogbnVtYmVyO1xyXG4gIG1pbldpdGhSZWxhdGl2ZVRvUmVzb2x1dGlvbj86IGJvb2xlYW47XHJcbiAgY3JvcHBlZFdpZHRoPzogbnVtYmVyO1xyXG4gIGNyb3BwZWRIZWlnaHQ/OiBudW1iZXI7XHJcbiAgY3JvcHBlckRyYXdTZXR0aW5ncz86IGFueTtcclxuICB0b3VjaFJhZGl1cz86IG51bWJlcjtcclxuICBub0ZpbGVJbnB1dD86IGJvb2xlYW47XHJcbiAgZmlsZVR5cGU/OiBzdHJpbmc7XHJcbiAgcmVzYW1wbGVGbj86IChjOiBIVE1MQ2FudmFzRWxlbWVudCkgPT4gdm9pZDtcclxuICBtYXJrZXJTaXplTXVsdGlwbGllcj86IG51bWJlcjtcclxuICBjZW50ZXJUb3VjaFJhZGl1cz86IG51bWJlcjtcclxuICBzaG93Q2VudGVyTWFya2VyPzogYm9vbGVhbjtcclxuICBhbGxvd2VkRmlsZXNSZWdleD86IFJlZ0V4cDtcclxuICBjcm9wT25SZXNpemU/OiBib29sZWFuO1xyXG4gIHByZXNlcnZlU2l6ZT86IGJvb2xlYW47XHJcbiAgY29tcHJlc3NSYXRpbz86IG51bWJlcjtcclxuICByb3VuZGVkPzogYm9vbGVhbjtcclxuICBrZWVwQXNwZWN0PzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENyb3BwZXJTZXR0aW5ncyBpbXBsZW1lbnRzIElDcm9wcGVyU2V0dGluZ3Mge1xyXG4gIHB1YmxpYyBjYW52YXNXaWR0aCA9IDMwMDtcclxuICBwdWJsaWMgY2FudmFzSGVpZ2h0ID0gMzAwO1xyXG5cclxuICBwdWJsaWMgZHluYW1pY1NpemluZyA9IGZhbHNlO1xyXG4gIHB1YmxpYyBjcm9wcGVyQ2xhc3M6IHN0cmluZztcclxuICBwdWJsaWMgY3JvcHBpbmdDbGFzczogc3RyaW5nO1xyXG5cclxuICBwdWJsaWMgd2lkdGggPSAyMDA7XHJcbiAgcHVibGljIGhlaWdodCA9IDIwMDtcclxuXHJcbiAgcHVibGljIG1pbldpZHRoID0gNTA7XHJcbiAgcHVibGljIG1pbkhlaWdodCA9IDUwO1xyXG4gIHB1YmxpYyBtaW5XaXRoUmVsYXRpdmVUb1Jlc29sdXRpb24gPSB0cnVlO1xyXG5cclxuICBwdWJsaWMgY3JvcHBlZFdpZHRoID0gMTAwO1xyXG4gIHB1YmxpYyBjcm9wcGVkSGVpZ2h0ID0gMTAwO1xyXG5cclxuICBwdWJsaWMgY3JvcHBlckRyYXdTZXR0aW5nczogQ3JvcHBlckRyYXdTZXR0aW5ncyA9IG5ldyBDcm9wcGVyRHJhd1NldHRpbmdzKCk7XHJcbiAgcHVibGljIHRvdWNoUmFkaXVzID0gMjA7XHJcbiAgcHVibGljIG5vRmlsZUlucHV0ID0gZmFsc2U7XHJcblxyXG4gIHB1YmxpYyBmaWxlVHlwZTogc3RyaW5nO1xyXG5cclxuICBwdWJsaWMgcmVzYW1wbGVGbjogKGM6IEhUTUxDYW52YXNFbGVtZW50KSA9PiB2b2lkO1xyXG5cclxuICBwdWJsaWMgbWFya2VyU2l6ZU11bHRpcGxpZXIgPSAxO1xyXG4gIHB1YmxpYyBjZW50ZXJUb3VjaFJhZGl1cyA9IDIwO1xyXG4gIHB1YmxpYyBzaG93Q2VudGVyTWFya2VyID0gdHJ1ZTtcclxuXHJcbiAgcHVibGljIGFsbG93ZWRGaWxlc1JlZ2V4OiBSZWdFeHAgPSAvXFwuKGpwZT9nfHBuZ3xnaWZ8Ym1wKSQvaTtcclxuICBwdWJsaWMgY3JvcE9uUmVzaXplID0gdHJ1ZTtcclxuICBwdWJsaWMgcHJlc2VydmVTaXplID0gZmFsc2U7XHJcblxyXG4gIHB1YmxpYyBjb21wcmVzc1JhdGlvID0gMS4wO1xyXG5cclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxyXG4gIHByaXZhdGUgX3JvdW5kZWQgPSBmYWxzZTtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxyXG4gIHByaXZhdGUgX2tlZXBBc3BlY3QgPSB0cnVlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihzZXR0aW5ncz86IElDcm9wcGVyU2V0dGluZ3MpIHtcclxuICAgIGlmICh0eXBlb2Ygc2V0dGluZ3MgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgc2V0dGluZ3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0IHJvdW5kZWQodmFsOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLl9yb3VuZGVkID0gdmFsO1xyXG4gICAgaWYgKHZhbCkge1xyXG4gICAgICB0aGlzLl9rZWVwQXNwZWN0ID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCByb3VuZGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JvdW5kZWQ7XHJcbiAgfVxyXG5cclxuICBzZXQga2VlcEFzcGVjdCh2YWw6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuX2tlZXBBc3BlY3QgPSB2YWw7XHJcbiAgICBpZiAodGhpcy5fcm91bmRlZCA9PT0gdHJ1ZSAmJiB0aGlzLl9rZWVwQXNwZWN0ID09PSBmYWxzZSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICdDYW5ub3Qgc2V0IGtlZXAgYXNwZWN0IHRvIGZhbHNlIG9uIHJvdW5kZWQgY3JvcHBlci4gRWxsaXBzaXMgbm90IHN1cHBvcnRlZCdcclxuICAgICAgKTtcclxuICAgICAgdGhpcy5fa2VlcEFzcGVjdCA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXQga2VlcEFzcGVjdCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9rZWVwQXNwZWN0O1xyXG4gIH1cclxufVxyXG4iXX0=
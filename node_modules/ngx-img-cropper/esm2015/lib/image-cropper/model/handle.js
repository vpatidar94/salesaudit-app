import { Point } from './point';
import { CropperSettings } from '../cropper-settings';
export class Handle {
    constructor(x, y, radius, settings) {
        this.cropperSettings = new CropperSettings();
        this.over = false;
        this.drag = false;
        this._position = new Point(x, y);
        this.offset = new Point(0, 0);
        this.radius = radius;
        this.cropperSettings = settings;
    }
    setDrag(value) {
        this.drag = value;
        this.setOver(value);
    }
    draw(ctx) {
        // this should't be empty
    }
    setOver(over) {
        this.over = over;
    }
    touchInBounds(x, y) {
        return (x > this.position.x - this.radius + this.offset.x &&
            x < this.position.x + this.radius + this.offset.x &&
            y > this.position.y - this.radius + this.offset.y &&
            y < this.position.y + this.radius + this.offset.y);
    }
    get position() {
        return this._position;
    }
    setPosition(x, y) {
        this._position.x = x;
        this._position.y = y;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWltZy1jcm9wcGVyLyIsInNvdXJjZXMiOlsibGliL2ltYWdlLWNyb3BwZXIvbW9kZWwvaGFuZGxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDaEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBZ0J0RCxNQUFNLE9BQU8sTUFBTTtJQVVqQixZQUFZLENBQVMsRUFBRSxDQUFTLEVBQUUsTUFBYyxFQUFFLFFBQXlCO1FBRnBFLG9CQUFlLEdBQW9CLElBQUksZUFBZSxFQUFFLENBQUM7UUFHOUQsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDbEIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUM7SUFDbEMsQ0FBQztJQUVNLE9BQU8sQ0FBQyxLQUFjO1FBQzNCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVNLElBQUksQ0FBQyxHQUE2QjtRQUN2Qyx5QkFBeUI7SUFDM0IsQ0FBQztJQUVNLE9BQU8sQ0FBQyxJQUFhO1FBQzFCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ25CLENBQUM7SUFFTSxhQUFhLENBQUMsQ0FBUyxFQUFFLENBQVM7UUFDdkMsT0FBTyxDQUNMLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNqRCxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakQsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2pELENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUNsRCxDQUFDO0lBQ0osQ0FBQztJQUVELElBQVcsUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUVNLFdBQVcsQ0FBQyxDQUFTLEVBQUUsQ0FBUztRQUNyQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi9wb2ludCc7XHJcbmltcG9ydCB7IENyb3BwZXJTZXR0aW5ncyB9IGZyb20gJy4uL2Nyb3BwZXItc2V0dGluZ3MnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJSGFuZGxlIHtcclxuICBvdmVyOiBib29sZWFuO1xyXG4gIGRyYWc6IGJvb2xlYW47XHJcbiAgcG9zaXRpb246IFBvaW50O1xyXG4gIG9mZnNldDogUG9pbnQ7XHJcbiAgcmFkaXVzOiBudW1iZXI7XHJcbiAgY3JvcHBlclNldHRpbmdzOiBDcm9wcGVyU2V0dGluZ3M7XHJcbiAgc2V0UG9zaXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkO1xyXG4gIHNldERyYWcodmFsdWU6IGJvb2xlYW4pOiB2b2lkO1xyXG4gIGRyYXcoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkO1xyXG4gIHNldE92ZXIob3ZlcjogYm9vbGVhbik6IHZvaWQ7XHJcbiAgdG91Y2hJbkJvdW5kcyh4OiBudW1iZXIsIHk6IG51bWJlcik6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBIYW5kbGUgaW1wbGVtZW50cyBJSGFuZGxlIHtcclxuICBwdWJsaWMgb3ZlcjogYm9vbGVhbjtcclxuICBwdWJsaWMgZHJhZzogYm9vbGVhbjtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxyXG4gIHByaXZhdGUgX3Bvc2l0aW9uOiBQb2ludDtcclxuICBwdWJsaWMgb2Zmc2V0OiBQb2ludDtcclxuICBwdWJsaWMgcmFkaXVzOiBudW1iZXI7XHJcblxyXG4gIHB1YmxpYyBjcm9wcGVyU2V0dGluZ3M6IENyb3BwZXJTZXR0aW5ncyA9IG5ldyBDcm9wcGVyU2V0dGluZ3MoKTtcclxuXHJcbiAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIHJhZGl1czogbnVtYmVyLCBzZXR0aW5nczogQ3JvcHBlclNldHRpbmdzKSB7XHJcbiAgICB0aGlzLm92ZXIgPSBmYWxzZTtcclxuICAgIHRoaXMuZHJhZyA9IGZhbHNlO1xyXG4gICAgdGhpcy5fcG9zaXRpb24gPSBuZXcgUG9pbnQoeCwgeSk7XHJcbiAgICB0aGlzLm9mZnNldCA9IG5ldyBQb2ludCgwLCAwKTtcclxuICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xyXG4gICAgdGhpcy5jcm9wcGVyU2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXREcmFnKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICB0aGlzLmRyYWcgPSB2YWx1ZTtcclxuICAgIHRoaXMuc2V0T3Zlcih2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZHJhdyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xyXG4gICAgLy8gdGhpcyBzaG91bGQndCBiZSBlbXB0eVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldE92ZXIob3ZlcjogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgdGhpcy5vdmVyID0gb3ZlcjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB0b3VjaEluQm91bmRzKHg6IG51bWJlciwgeTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICB4ID4gdGhpcy5wb3NpdGlvbi54IC0gdGhpcy5yYWRpdXMgKyB0aGlzLm9mZnNldC54ICYmXHJcbiAgICAgIHggPCB0aGlzLnBvc2l0aW9uLnggKyB0aGlzLnJhZGl1cyArIHRoaXMub2Zmc2V0LnggJiZcclxuICAgICAgeSA+IHRoaXMucG9zaXRpb24ueSAtIHRoaXMucmFkaXVzICsgdGhpcy5vZmZzZXQueSAmJlxyXG4gICAgICB5IDwgdGhpcy5wb3NpdGlvbi55ICsgdGhpcy5yYWRpdXMgKyB0aGlzLm9mZnNldC55XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBwb3NpdGlvbigpOiBQb2ludCB7XHJcbiAgICByZXR1cm4gdGhpcy5fcG9zaXRpb247XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0UG9zaXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgIHRoaXMuX3Bvc2l0aW9uLnggPSB4O1xyXG4gICAgdGhpcy5fcG9zaXRpb24ueSA9IHk7XHJcbiAgfVxyXG59XHJcbiJdfQ==
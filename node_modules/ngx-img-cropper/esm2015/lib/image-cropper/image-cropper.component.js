import { __decorate, __metadata, __param } from "tslib";
import { Component, AfterViewInit, OnChanges, OnDestroy, ViewChild, ElementRef, Input, Output, EventEmitter, Renderer2, SimpleChanges, Inject } from '@angular/core';
import { CropperSettings } from './cropper-settings';
import { ImageCropper } from './imageCropper';
import { CropPosition } from './model/cropPosition';
import { Exif } from './exif';
import { DOCUMENT } from '@angular/common';
let ImageCropperComponent = class ImageCropperComponent {
    constructor(renderer, document) {
        this.document = document;
        this.cropPositionChange = new EventEmitter();
        this.exif = new Exif();
        // tslint:disable-next-line:no-output-on-prefix
        this.onCrop = new EventEmitter();
        this.imageSet = new EventEmitter();
        this.dragUnsubscribers = [];
        this.renderer = renderer;
    }
    ngAfterViewInit() {
        const canvas = this.cropcanvas.nativeElement;
        if (!this.settings) {
            this.settings = new CropperSettings();
        }
        if (this.settings.cropperClass) {
            this.renderer.setAttribute(canvas, 'class', this.settings.cropperClass);
        }
        if (!this.settings.dynamicSizing) {
            this.renderer.setAttribute(canvas, 'width', this.settings.canvasWidth.toString());
            this.renderer.setAttribute(canvas, 'height', this.settings.canvasHeight.toString());
        }
        else {
            this.windowListener = this.resize.bind(this);
            window.addEventListener('resize', this.windowListener);
        }
        if (!this.cropper) {
            this.cropper = new ImageCropper(this.settings);
        }
        this.cropper.prepare(canvas);
    }
    ngOnChanges(changes) {
        if (this.isCropPositionChanged(changes)) {
            this.cropper.updateCropPosition(this.cropPosition.toBounds());
            if (this.cropper.isImageSet()) {
                const bounds = this.cropper.getCropBounds();
                this.image.image = this.cropper.getCroppedImageHelper().src;
                this.onCrop.emit(bounds);
            }
            this.updateCropBounds();
        }
        if (changes.inputImage) {
            this.setImage(changes.inputImage.currentValue);
        }
        if (changes.settings && this.cropper) {
            this.cropper.updateSettings(this.settings);
            if (this.cropper.isImageSet()) {
                this.image.image = this.cropper.getCroppedImageHelper().src;
                this.onCrop.emit(this.cropper.getCropBounds());
            }
        }
    }
    ngOnDestroy() {
        this.removeDragListeners();
        if (this.settings.dynamicSizing && this.windowListener) {
            window.removeEventListener('resize', this.windowListener);
        }
    }
    onTouchMove(event) {
        this.cropper.onTouchMove(event);
    }
    onTouchStart(event) {
        this.cropper.onTouchStart(event);
    }
    onTouchEnd(event) {
        this.cropper.onTouchEnd(event);
        if (this.cropper.isImageSet()) {
            this.image.image = this.cropper.getCroppedImageHelper().src;
            this.onCrop.emit(this.cropper.getCropBounds());
            this.updateCropBounds();
        }
    }
    onMouseDown(event) {
        this.dragUnsubscribers.push(this.renderer.listen(this.document, 'mousemove', this.onMouseMove.bind(this)));
        this.dragUnsubscribers.push(this.renderer.listen(this.document, 'mouseup', this.onMouseUp.bind(this)));
        this.cropper.onMouseDown(event);
        // if (!this.cropper.isImageSet() && !this.settings.noFileInput) {
        //   // load img
        //   this.fileInput.nativeElement.click();
        // }
    }
    removeDragListeners() {
        this.dragUnsubscribers.forEach(unsubscribe => unsubscribe());
    }
    onMouseUp(event) {
        this.removeDragListeners();
        if (this.cropper.isImageSet()) {
            this.cropper.onMouseUp(event);
            this.image.image = this.cropper.getCroppedImageHelper().src;
            this.onCrop.emit(this.cropper.getCropBounds());
            this.updateCropBounds();
        }
    }
    onMouseMove(event) {
        this.cropper.onMouseMove(event);
    }
    fileChangeListener($event) {
        if ($event.target.files.length === 0) {
            return;
        }
        const file = $event.target.files[0];
        if (this.settings.allowedFilesRegex.test(file.name)) {
            const image = new Image();
            const fileReader = new FileReader();
            fileReader.addEventListener('loadend', (loadEvent) => {
                image.addEventListener('load', () => {
                    this.setImage(image);
                });
                image.src = loadEvent.target.result;
            });
            fileReader.readAsDataURL(file);
        }
    }
    resize() {
        const canvas = this.cropcanvas.nativeElement;
        this.settings.canvasWidth = canvas.offsetWidth;
        this.settings.canvasHeight = canvas.offsetHeight;
        this.cropper.resizeCanvas(canvas.offsetWidth, canvas.offsetHeight, true);
    }
    reset() {
        this.cropper.reset();
        this.renderer.setAttribute(this.cropcanvas.nativeElement, 'class', this.settings.cropperClass);
        this.image.image = this.cropper.getCroppedImageHelper().src;
    }
    setImage(image, newBounds = null) {
        this.imageSet.emit(true);
        this.renderer.setAttribute(this.cropcanvas.nativeElement, 'class', `${this.settings.cropperClass} ${this.settings.croppingClass}`);
        this.raf = window.requestAnimationFrame(() => {
            if (this.raf) {
                window.cancelAnimationFrame(this.raf);
            }
            if (image.naturalHeight > 0 && image.naturalWidth > 0) {
                image.height = image.naturalHeight;
                image.width = image.naturalWidth;
                window.cancelAnimationFrame(this.raf);
                this.getOrientedImage(image, (img) => {
                    if (this.settings.dynamicSizing) {
                        const canvas = this.cropcanvas.nativeElement;
                        this.settings.canvasWidth = canvas.offsetWidth;
                        this.settings.canvasHeight = canvas.offsetHeight;
                        this.cropper.resizeCanvas(canvas.offsetWidth, canvas.offsetHeight, false);
                    }
                    this.cropper.setImage(img);
                    if (this.cropPosition && this.cropPosition.isInitialized()) {
                        this.cropper.updateCropPosition(this.cropPosition.toBounds());
                    }
                    this.image.original = img;
                    let bounds = this.cropper.getCropBounds();
                    this.image.image = this.cropper.getCroppedImageHelper().src;
                    if (!this.image) {
                        this.image = image;
                    }
                    if (newBounds != null) {
                        bounds = newBounds;
                        this.cropper.setBounds(bounds);
                        this.cropper.updateCropPosition(bounds);
                    }
                    this.onCrop.emit(bounds);
                });
            }
        });
    }
    isCropPositionChanged(changes) {
        if (this.cropper &&
            changes.cropPosition &&
            this.isCropPositionUpdateNeeded) {
            return true;
        }
        else {
            this.isCropPositionUpdateNeeded = true;
            return false;
        }
    }
    updateCropBounds() {
        const cropBound = this.cropper.getCropBounds();
        this.cropPositionChange.emit(new CropPosition(cropBound.left, cropBound.top, cropBound.width, cropBound.height));
        this.isCropPositionUpdateNeeded = false;
    }
    getOrientedImage(image, callback) {
        let img;
        this.exif.getData(image, () => {
            const orientation = this.exif.getTag(image, 'Orientation');
            if ([3, 6, 8].indexOf(orientation) > -1) {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                let cw = image.width;
                let ch = image.height;
                let cx = 0;
                let cy = 0;
                let deg = 0;
                switch (orientation) {
                    case 3:
                        cx = -image.width;
                        cy = -image.height;
                        deg = 180;
                        break;
                    case 6:
                        cw = image.height;
                        ch = image.width;
                        cy = -image.height;
                        deg = 90;
                        break;
                    case 8:
                        cw = image.height;
                        ch = image.width;
                        cx = -image.width;
                        deg = 270;
                        break;
                    default:
                        break;
                }
                canvas.width = cw;
                canvas.height = ch;
                ctx.rotate((deg * Math.PI) / 180);
                ctx.drawImage(image, cx, cy);
                img = document.createElement('img');
                img.width = cw;
                img.height = ch;
                img.addEventListener('load', () => {
                    callback(img);
                });
                img.src = canvas.toDataURL('image/png');
            }
            else {
                img = image;
                callback(img);
            }
        });
    }
};
ImageCropperComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
__decorate([
    ViewChild('cropcanvas', { static: true }),
    __metadata("design:type", ElementRef)
], ImageCropperComponent.prototype, "cropcanvas", void 0);
__decorate([
    ViewChild('fileInput'),
    __metadata("design:type", ElementRef)
], ImageCropperComponent.prototype, "fileInput", void 0);
__decorate([
    Input(),
    __metadata("design:type", CropperSettings)
], ImageCropperComponent.prototype, "settings", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], ImageCropperComponent.prototype, "image", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], ImageCropperComponent.prototype, "inputImage", void 0);
__decorate([
    Input(),
    __metadata("design:type", ImageCropper)
], ImageCropperComponent.prototype, "cropper", void 0);
__decorate([
    Input(),
    __metadata("design:type", CropPosition)
], ImageCropperComponent.prototype, "cropPosition", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ImageCropperComponent.prototype, "cropPositionChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ImageCropperComponent.prototype, "onCrop", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ImageCropperComponent.prototype, "imageSet", void 0);
ImageCropperComponent = __decorate([
    Component({
        // tslint:disable-next-line:component-selector
        selector: 'img-cropper',
        template: "<span class=\"ng2-imgcrop\">\r\n  <input\r\n    *ngIf=\"!settings.noFileInput\"\r\n    #fileInput\r\n    type=\"file\"\r\n    accept=\"image/*\"\r\n    (change)=\"fileChangeListener($event)\"\r\n  />\r\n  <canvas\r\n    #cropcanvas\r\n    (mousedown)=\"onMouseDown($event)\"\r\n    (touchmove)=\"onTouchMove($event)\"\r\n    (touchend)=\"onTouchEnd($event)\"\r\n    (touchstart)=\"onTouchStart($event)\"\r\n  >\r\n  </canvas>\r\n</span>\r\n"
    }),
    __param(1, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [Renderer2, Object])
], ImageCropperComponent);
export { ImageCropperComponent };
//# sourceMappingURL=data:application/json;base64,
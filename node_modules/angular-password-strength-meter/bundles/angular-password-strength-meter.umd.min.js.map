{"version":3,"sources":["../../../projects/password-strength-meter/src/lib/password-strength-meter.service.ts","../../../projects/password-strength-meter/src/lib/password-strength-meter.component.ts","../../../projects/password-strength-meter/src/lib/password-strength-meter.module.ts"],"names":["PasswordStrengthMeterService","prototype","score","password","zxcvbn","scoreWithFeedback","result","feedback","Injectable","PasswordStrengthMeterComponent","passwordStrengthMeterService","this","minPasswordLength","enableFeedback","colors","strengthChange","EventEmitter","passwordStrength","prevPasswordStrength","defaultColours","ngOnInit","ngOnChanges","changes","calculatePasswordStrength","length","emit","getMeterFillColor","strength","Component","args","selector","template","providers","Input","Output","NgModule","imports","CommonModule","declarations","exports"],"mappings":"sdAME,SAAAA,YAYAA,EAAAC,UAAAC,MAAA,SAAMC,GAEJ,OADeC,EAAAA,OAAOD,GACRD,OAShBF,EAAAC,UAAAI,kBAAA,SACEF,GAEA,IAAMG,EAASF,EAAAA,OAAOD,GACtB,MAAO,CAAED,MAAOI,EAAOJ,MAAOK,SAAUD,EAAOC,oCA7BlDC,EAAAA,oECuCC,SAAAC,EACUC,GAAAC,KAAAD,6BAAAA,EAvBDC,KAAAC,kBAAoB,EAEpBD,KAAAE,gBAAiB,EAEjBF,KAAAG,OAAmB,GAElBH,KAAAI,eAAiB,IAAIC,EAAAA,aAE/BL,KAAAM,iBAA2B,KAE3BN,KAAAJ,SAAuD,KAE/CI,KAAAO,qBAAuB,KAEvBP,KAAAQ,eAAiB,CACvB,UACA,YACA,SACA,cACA,gBAOFV,EAAAR,UAAAmB,SAAA,aAEAX,EAAAR,UAAAoB,YAAA,SAAYC,GACNA,EAAQnB,UACVQ,KAAKY,6BAIDd,EAAAR,UAAAsB,0BAAA,WAEN,GAAKZ,KAAKR,SAGH,GAAIQ,KAAKR,UAAYQ,KAAKR,SAASqB,OAASb,KAAKC,kBACtDD,KAAKM,iBAAmB,EACxBN,KAAKJ,SAAW,UAEhB,GAAII,KAAKE,eAAgB,CACvB,IAAMP,EAASK,KAAKD,6BAA6BL,kBAC/CM,KAAKR,UAEPQ,KAAKM,iBAAmBX,EAAOJ,MAC/BS,KAAKJ,SAAWD,EAAOC,cAEvBI,KAAKM,iBAAmBN,KAAKD,6BAA6BR,MACxDS,KAAKR,UAEPQ,KAAKJ,SAAW,UAhBlBI,KAAKM,iBAAmB,KACxBN,KAAKJ,SAAW,KAoBdI,KAAKO,uBAAyBP,KAAKM,mBACrCN,KAAKI,eAAeU,KAAKd,KAAKM,kBAC9BN,KAAKO,qBAAuBP,KAAKM,mBAIrCR,EAAAR,UAAAyB,kBAAA,SAAkBC,GAChB,OAAKA,GAAYA,EAAW,GAAKA,EAAW,EACnChB,KAAKG,OAAO,GAAKH,KAAKG,OAAO,GAAKH,KAAKQ,eAAe,GAGxDR,KAAKG,OAAOa,GACfhB,KAAKG,OAAOa,GACZhB,KAAKQ,eAAeQ,6BAhF3BC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,0BACVC,SAAA,mlBAEAC,UAAW,CAAChC,kmCANLA,uCASNiC,EAAAA,iCAEAA,EAAAA,8BAEAA,EAAAA,sBAEAA,EAAAA,8BAEAC,EAAAA,gBCjBH,iCALCC,EAAAA,SAAQN,KAAA,CAAC,CACRO,QAAS,CAACC,EAAAA,cACVC,aAAc,CAAC7B,GACf8B,QAAS,CAAC9B","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { zxcvbn } from 'zxcvbn3';\n\n@Injectable()\nexport class PasswordStrengthMeterService {\n  constructor() {}\n\n  /**\n   *  this will return the password strength score in number\n   *  0 - too guessable\n   *  1 - very guessable\n   *  2 - somewhat guessable\n   *  3 - safely unguessable\n   *  4 - very unguessable\n   *\n   *  @param password - Password\n   */\n  score(password): number {\n    const result = zxcvbn(password);\n    return result.score;\n  }\n\n  /**\n   * this will return the password strength score with feedback messages\n   * return type { score: number; feedback: { suggestions: string[]; warning: string } }\n   *\n   * @param password - Password\n   */\n  scoreWithFeedback(\n    password\n  ): { score: number; feedback: { suggestions: string[]; warning: string } } {\n    const result = zxcvbn(password);\n    return { score: result.score, feedback: result.feedback };\n  }\n}\n","import {\n  Component,\n  OnInit,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  Output,\n  EventEmitter\n} from '@angular/core';\n\nimport { PasswordStrengthMeterService } from './password-strength-meter.service';\n\n@Component({\n  selector: 'password-strength-meter',\n  templateUrl: './password-strength-meter.component.html',\n  styleUrls: ['./password-strength-meter.component.scss'],\n  providers: [PasswordStrengthMeterService]\n})\nexport class PasswordStrengthMeterComponent implements OnInit, OnChanges {\n  @Input() password: string;\n\n  @Input() minPasswordLength = 8;\n\n  @Input() enableFeedback = false;\n\n  @Input() colors: string[] = [];\n\n  @Output() strengthChange = new EventEmitter<number>();\n\n  passwordStrength: number = null;\n\n  feedback: { suggestions: string[]; warning: string } = null;\n\n  private prevPasswordStrength = null;\n\n  private defaultColours = [\n    'darkred',\n    'orangered',\n    'orange',\n    'yellowgreen',\n    'green'\n  ];\n\n  constructor(\n    private passwordStrengthMeterService: PasswordStrengthMeterService\n  ) {}\n\n  ngOnInit() {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.password) {\n      this.calculatePasswordStrength();\n    }\n  }\n\n  private calculatePasswordStrength() {\n    // TODO validation logic optimization\n    if (!this.password) {\n      this.passwordStrength = null;\n      this.feedback = null;\n    } else if (this.password && this.password.length < this.minPasswordLength) {\n      this.passwordStrength = 0;\n      this.feedback = null;\n    } else {\n      if (this.enableFeedback) {\n        const result = this.passwordStrengthMeterService.scoreWithFeedback(\n          this.password\n        );\n        this.passwordStrength = result.score;\n        this.feedback = result.feedback;\n      } else {\n        this.passwordStrength = this.passwordStrengthMeterService.score(\n          this.password\n        );\n        this.feedback = null;\n      }\n    }\n\n    // Only emit the passwordStrength if it changed\n    if (this.prevPasswordStrength !== this.passwordStrength) {\n      this.strengthChange.emit(this.passwordStrength);\n      this.prevPasswordStrength = this.passwordStrength;\n    }\n  }\n\n  getMeterFillColor(strength) {\n    if (!strength || strength < 0 || strength > 5) {\n      return this.colors[0] ? this.colors[0] : this.defaultColours[0];\n    }\n\n    return this.colors[strength]\n      ? this.colors[strength]\n      : this.defaultColours[strength];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PasswordStrengthMeterComponent } from './password-strength-meter.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PasswordStrengthMeterComponent],\n  exports: [PasswordStrengthMeterComponent]\n})\nexport class PasswordStrengthMeterModule {}\n"]}
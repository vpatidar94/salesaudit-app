import { Injectable, EventEmitter, Component, Input, Output, NgModule } from '@angular/core';
import { zxcvbn } from 'zxcvbn3';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function PasswordStrengthMeterComponent_ng_container_3_small_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.feedback.warning, " ");
} }
function PasswordStrengthMeterComponent_ng_container_3_small_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const suggetion_r4 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(suggetion_r4);
} }
function PasswordStrengthMeterComponent_ng_container_3_small_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "small", 6);
    ɵngcc0.ɵɵtemplate(1, PasswordStrengthMeterComponent_ng_container_3_small_2_ng_container_1_Template, 2, 1, "ng-container", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r2.feedback.suggestions);
} }
function PasswordStrengthMeterComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, PasswordStrengthMeterComponent_ng_container_3_small_1_Template, 2, 1, "small", 3);
    ɵngcc0.ɵɵtemplate(2, PasswordStrengthMeterComponent_ng_container_3_small_2_Template, 2, 1, "small", 4);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.feedback.warning);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.feedback.suggestions && ctx_r0.feedback.suggestions.length > 0);
} }
class PasswordStrengthMeterService {
    constructor() { }
    /**
     *  this will return the password strength score in number
     *  0 - too guessable
     *  1 - very guessable
     *  2 - somewhat guessable
     *  3 - safely unguessable
     *  4 - very unguessable
     *
     *  @param password - Password
     */
    score(password) {
        const result = zxcvbn(password);
        return result.score;
    }
    /**
     * this will return the password strength score with feedback messages
     * return type { score: number; feedback: { suggestions: string[]; warning: string } }
     *
     * @param password - Password
     */
    scoreWithFeedback(password) {
        const result = zxcvbn(password);
        return { score: result.score, feedback: result.feedback };
    }
}
PasswordStrengthMeterService.ɵfac = function PasswordStrengthMeterService_Factory(t) { return new (t || PasswordStrengthMeterService)(); };
PasswordStrengthMeterService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PasswordStrengthMeterService, factory: PasswordStrengthMeterService.ɵfac });
PasswordStrengthMeterService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PasswordStrengthMeterService, [{
        type: Injectable
    }], function () { return []; }, null); })();

class PasswordStrengthMeterComponent {
    constructor(passwordStrengthMeterService) {
        this.passwordStrengthMeterService = passwordStrengthMeterService;
        this.minPasswordLength = 8;
        this.enableFeedback = false;
        this.colors = [];
        this.strengthChange = new EventEmitter();
        this.passwordStrength = null;
        this.feedback = null;
        this.prevPasswordStrength = null;
        this.defaultColours = [
            'darkred',
            'orangered',
            'orange',
            'yellowgreen',
            'green'
        ];
    }
    ngOnInit() { }
    ngOnChanges(changes) {
        if (changes.password) {
            this.calculatePasswordStrength();
        }
    }
    calculatePasswordStrength() {
        // TODO validation logic optimization
        if (!this.password) {
            this.passwordStrength = null;
            this.feedback = null;
        }
        else if (this.password && this.password.length < this.minPasswordLength) {
            this.passwordStrength = 0;
            this.feedback = null;
        }
        else {
            if (this.enableFeedback) {
                const result = this.passwordStrengthMeterService.scoreWithFeedback(this.password);
                this.passwordStrength = result.score;
                this.feedback = result.feedback;
            }
            else {
                this.passwordStrength = this.passwordStrengthMeterService.score(this.password);
                this.feedback = null;
            }
        }
        // Only emit the passwordStrength if it changed
        if (this.prevPasswordStrength !== this.passwordStrength) {
            this.strengthChange.emit(this.passwordStrength);
            this.prevPasswordStrength = this.passwordStrength;
        }
    }
    getMeterFillColor(strength) {
        if (!strength || strength < 0 || strength > 5) {
            return this.colors[0] ? this.colors[0] : this.defaultColours[0];
        }
        return this.colors[strength]
            ? this.colors[strength]
            : this.defaultColours[strength];
    }
}
PasswordStrengthMeterComponent.ɵfac = function PasswordStrengthMeterComponent_Factory(t) { return new (t || PasswordStrengthMeterComponent)(ɵngcc0.ɵɵdirectiveInject(PasswordStrengthMeterService)); };
PasswordStrengthMeterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PasswordStrengthMeterComponent, selectors: [["password-strength-meter"]], inputs: { minPasswordLength: "minPasswordLength", enableFeedback: "enableFeedback", colors: "colors", password: "password" }, outputs: { strengthChange: "strengthChange" }, features: [ɵngcc0.ɵɵProvidersFeature([PasswordStrengthMeterService]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 4, consts: [[1, "strength-meter"], [1, "strength-meter-fill"], [4, "ngIf"], ["class", "password-feedback", 4, "ngIf"], ["class", "password-suggetion", 4, "ngIf"], [1, "password-feedback"], [1, "password-suggetion"], [4, "ngFor", "ngForOf"]], template: function PasswordStrengthMeterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "div", 0);
        ɵngcc0.ɵɵelement(2, "div", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, PasswordStrengthMeterComponent_ng_container_3_Template, 3, 2, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleProp("background", ctx.getMeterFillColor(ctx.passwordStrength));
        ɵngcc0.ɵɵattribute("data-strength", ctx.passwordStrength);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.enableFeedback && ctx.feedback);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf], styles: ["*[_ngcontent-%COMP%], [_ngcontent-%COMP%]:after, [_ngcontent-%COMP%]:before{box-sizing:border-box}.strength-meter[_ngcontent-%COMP%]{background:#ddd;border-radius:3px;height:3px;margin:10px auto;position:relative}.strength-meter[_ngcontent-%COMP%]:after, .strength-meter[_ngcontent-%COMP%]:before{background:transparent;border-color:#fff;border-style:solid;border-width:0 5px;content:\"\";display:block;height:inherit;position:absolute;width:calc(20% + 6px);z-index:10}.strength-meter[_ngcontent-%COMP%]:before{left:calc(20% - 4px)}.strength-meter[_ngcontent-%COMP%]:after{right:calc(20% - 4px)}.strength-meter-fill[_ngcontent-%COMP%]{background:transparent;border-radius:inherit;height:inherit;position:absolute;transition:width .5s ease-in-out,background .25s;width:0}.strength-meter-fill[data-strength=\"0\"][_ngcontent-%COMP%]{background:#8b0000;width:20%}.strength-meter-fill[data-strength=\"1\"][_ngcontent-%COMP%]{background:#ff4500;width:40%}.strength-meter-fill[data-strength=\"2\"][_ngcontent-%COMP%]{background:orange;width:60%}.strength-meter-fill[data-strength=\"3\"][_ngcontent-%COMP%]{background:#9acd32;width:80%}.strength-meter-fill[data-strength=\"4\"][_ngcontent-%COMP%]{background:green;width:100%}.password-feedback[_ngcontent-%COMP%], .password-suggetion[_ngcontent-%COMP%]{color:#6c757d!important;display:block;font-size:70%;font-weight:400;margin-top:.25rem}"] });
PasswordStrengthMeterComponent.ctorParameters = () => [
    { type: PasswordStrengthMeterService }
];
PasswordStrengthMeterComponent.propDecorators = {
    password: [{ type: Input }],
    minPasswordLength: [{ type: Input }],
    enableFeedback: [{ type: Input }],
    colors: [{ type: Input }],
    strengthChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PasswordStrengthMeterComponent, [{
        type: Component,
        args: [{
                selector: 'password-strength-meter',
                template: "<div>\n  <div class=\"strength-meter\">\n    <div class=\"strength-meter-fill\" [style.background]=\"getMeterFillColor(passwordStrength)\" [attr.data-strength]=\"passwordStrength\"></div>\n  </div>\n  <ng-container *ngIf=\"enableFeedback && feedback\">\n    <small class=\"password-feedback\" *ngIf=\"feedback.warning\">\n      {{feedback.warning}}\n    </small>\n    <small class=\"password-suggetion\" *ngIf=\"feedback.suggestions && feedback.suggestions.length > 0\">\n      <ng-container *ngFor=\"let suggetion of feedback.suggestions\">{{suggetion}}</ng-container>\n    </small>\n  </ng-container>\n</div>\n",
                providers: [PasswordStrengthMeterService],
                styles: ["*,:after,:before{box-sizing:border-box}.strength-meter{background:#ddd;border-radius:3px;height:3px;margin:10px auto;position:relative}.strength-meter:after,.strength-meter:before{background:transparent;border-color:#fff;border-style:solid;border-width:0 5px;content:\"\";display:block;height:inherit;position:absolute;width:calc(20% + 6px);z-index:10}.strength-meter:before{left:calc(20% - 4px)}.strength-meter:after{right:calc(20% - 4px)}.strength-meter-fill{background:transparent;border-radius:inherit;height:inherit;position:absolute;transition:width .5s ease-in-out,background .25s;width:0}.strength-meter-fill[data-strength=\"0\"]{background:#8b0000;width:20%}.strength-meter-fill[data-strength=\"1\"]{background:#ff4500;width:40%}.strength-meter-fill[data-strength=\"2\"]{background:orange;width:60%}.strength-meter-fill[data-strength=\"3\"]{background:#9acd32;width:80%}.strength-meter-fill[data-strength=\"4\"]{background:green;width:100%}.password-feedback,.password-suggetion{color:#6c757d!important;display:block;font-size:70%;font-weight:400;margin-top:.25rem}"]
            }]
    }], function () { return [{ type: PasswordStrengthMeterService }]; }, { minPasswordLength: [{
            type: Input
        }], enableFeedback: [{
            type: Input
        }], colors: [{
            type: Input
        }], strengthChange: [{
            type: Output
        }], password: [{
            type: Input
        }] }); })();

class PasswordStrengthMeterModule {
}
PasswordStrengthMeterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PasswordStrengthMeterModule });
PasswordStrengthMeterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PasswordStrengthMeterModule_Factory(t) { return new (t || PasswordStrengthMeterModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PasswordStrengthMeterModule, { declarations: function () { return [PasswordStrengthMeterComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [PasswordStrengthMeterComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PasswordStrengthMeterModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [PasswordStrengthMeterComponent],
                exports: [PasswordStrengthMeterComponent]
            }]
    }], null, null); })();

/*
 * Public API Surface of password-strength-meter
 */

/**
 * Generated bundle index. Do not edit.
 */

export { PasswordStrengthMeterComponent, PasswordStrengthMeterModule, PasswordStrengthMeterService };

//# sourceMappingURL=angular-password-strength-meter.js.map
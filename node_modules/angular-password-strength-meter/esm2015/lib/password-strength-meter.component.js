import { Component, Input, Output, EventEmitter } from '@angular/core';
import { PasswordStrengthMeterService } from './password-strength-meter.service';
export class PasswordStrengthMeterComponent {
    constructor(passwordStrengthMeterService) {
        this.passwordStrengthMeterService = passwordStrengthMeterService;
        this.minPasswordLength = 8;
        this.enableFeedback = false;
        this.colors = [];
        this.strengthChange = new EventEmitter();
        this.passwordStrength = null;
        this.feedback = null;
        this.prevPasswordStrength = null;
        this.defaultColours = [
            'darkred',
            'orangered',
            'orange',
            'yellowgreen',
            'green'
        ];
    }
    ngOnInit() { }
    ngOnChanges(changes) {
        if (changes.password) {
            this.calculatePasswordStrength();
        }
    }
    calculatePasswordStrength() {
        // TODO validation logic optimization
        if (!this.password) {
            this.passwordStrength = null;
            this.feedback = null;
        }
        else if (this.password && this.password.length < this.minPasswordLength) {
            this.passwordStrength = 0;
            this.feedback = null;
        }
        else {
            if (this.enableFeedback) {
                const result = this.passwordStrengthMeterService.scoreWithFeedback(this.password);
                this.passwordStrength = result.score;
                this.feedback = result.feedback;
            }
            else {
                this.passwordStrength = this.passwordStrengthMeterService.score(this.password);
                this.feedback = null;
            }
        }
        // Only emit the passwordStrength if it changed
        if (this.prevPasswordStrength !== this.passwordStrength) {
            this.strengthChange.emit(this.passwordStrength);
            this.prevPasswordStrength = this.passwordStrength;
        }
    }
    getMeterFillColor(strength) {
        if (!strength || strength < 0 || strength > 5) {
            return this.colors[0] ? this.colors[0] : this.defaultColours[0];
        }
        return this.colors[strength]
            ? this.colors[strength]
            : this.defaultColours[strength];
    }
}
PasswordStrengthMeterComponent.decorators = [
    { type: Component, args: [{
                selector: 'password-strength-meter',
                template: "<div>\n  <div class=\"strength-meter\">\n    <div class=\"strength-meter-fill\" [style.background]=\"getMeterFillColor(passwordStrength)\" [attr.data-strength]=\"passwordStrength\"></div>\n  </div>\n  <ng-container *ngIf=\"enableFeedback && feedback\">\n    <small class=\"password-feedback\" *ngIf=\"feedback.warning\">\n      {{feedback.warning}}\n    </small>\n    <small class=\"password-suggetion\" *ngIf=\"feedback.suggestions && feedback.suggestions.length > 0\">\n      <ng-container *ngFor=\"let suggetion of feedback.suggestions\">{{suggetion}}</ng-container>\n    </small>\n  </ng-container>\n</div>\n",
                providers: [PasswordStrengthMeterService],
                styles: ["*,:after,:before{box-sizing:border-box}.strength-meter{background:#ddd;border-radius:3px;height:3px;margin:10px auto;position:relative}.strength-meter:after,.strength-meter:before{background:transparent;border-color:#fff;border-style:solid;border-width:0 5px;content:\"\";display:block;height:inherit;position:absolute;width:calc(20% + 6px);z-index:10}.strength-meter:before{left:calc(20% - 4px)}.strength-meter:after{right:calc(20% - 4px)}.strength-meter-fill{background:transparent;border-radius:inherit;height:inherit;position:absolute;transition:width .5s ease-in-out,background .25s;width:0}.strength-meter-fill[data-strength=\"0\"]{background:#8b0000;width:20%}.strength-meter-fill[data-strength=\"1\"]{background:#ff4500;width:40%}.strength-meter-fill[data-strength=\"2\"]{background:orange;width:60%}.strength-meter-fill[data-strength=\"3\"]{background:#9acd32;width:80%}.strength-meter-fill[data-strength=\"4\"]{background:green;width:100%}.password-feedback,.password-suggetion{color:#6c757d!important;display:block;font-size:70%;font-weight:400;margin-top:.25rem}"]
            },] }
];
PasswordStrengthMeterComponent.ctorParameters = () => [
    { type: PasswordStrengthMeterService }
];
PasswordStrengthMeterComponent.propDecorators = {
    password: [{ type: Input }],
    minPasswordLength: [{ type: Input }],
    enableFeedback: [{ type: Input }],
    colors: [{ type: Input }],
    strengthChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtc3RyZW5ndGgtbWV0ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii9ob21lL2FudG9hbnRvbnlrL1Byb2plY3RzL3Bhc3N3b3JkLXN0cmVuZ3RoLW1ldGVyL3Byb2plY3RzL3Bhc3N3b3JkLXN0cmVuZ3RoLW1ldGVyL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wYXNzd29yZC1zdHJlbmd0aC1tZXRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxLQUFLLEVBR0wsTUFBTSxFQUNOLFlBQVksRUFDYixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQVFqRixNQUFNLE9BQU8sOEJBQThCO0lBeUJ6QyxZQUNVLDRCQUEwRDtRQUExRCxpQ0FBNEIsR0FBNUIsNEJBQTRCLENBQThCO1FBdkIzRCxzQkFBaUIsR0FBRyxDQUFDLENBQUM7UUFFdEIsbUJBQWMsR0FBRyxLQUFLLENBQUM7UUFFdkIsV0FBTSxHQUFhLEVBQUUsQ0FBQztRQUVyQixtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFFdEQscUJBQWdCLEdBQVcsSUFBSSxDQUFDO1FBRWhDLGFBQVEsR0FBK0MsSUFBSSxDQUFDO1FBRXBELHlCQUFvQixHQUFHLElBQUksQ0FBQztRQUU1QixtQkFBYyxHQUFHO1lBQ3ZCLFNBQVM7WUFDVCxXQUFXO1lBQ1gsUUFBUTtZQUNSLGFBQWE7WUFDYixPQUFPO1NBQ1IsQ0FBQztJQUlDLENBQUM7SUFFSixRQUFRLEtBQUksQ0FBQztJQUViLFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUU7WUFDcEIsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7U0FDbEM7SUFDSCxDQUFDO0lBRU8seUJBQXlCO1FBQy9CLHFDQUFxQztRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1lBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1NBQ3RCO2FBQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUN6RSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1NBQ3RCO2FBQU07WUFDTCxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7Z0JBQ3ZCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxpQkFBaUIsQ0FDaEUsSUFBSSxDQUFDLFFBQVEsQ0FDZCxDQUFDO2dCQUNGLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUNyQyxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7YUFDakM7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxLQUFLLENBQzdELElBQUksQ0FBQyxRQUFRLENBQ2QsQ0FBQztnQkFDRixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQzthQUN0QjtTQUNGO1FBRUQsK0NBQStDO1FBQy9DLElBQUksSUFBSSxDQUFDLG9CQUFvQixLQUFLLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN2RCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO1NBQ25EO0lBQ0gsQ0FBQztJQUVELGlCQUFpQixDQUFDLFFBQVE7UUFDeEIsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLEdBQUcsQ0FBQyxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUU7WUFDN0MsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pFO1FBRUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztZQUMxQixDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7WUFDdkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7O1lBakZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUseUJBQXlCO2dCQUNuQyxnbkJBQXVEO2dCQUV2RCxTQUFTLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQzs7YUFDMUM7OztZQVBRLDRCQUE0Qjs7O3VCQVNsQyxLQUFLO2dDQUVMLEtBQUs7NkJBRUwsS0FBSztxQkFFTCxLQUFLOzZCQUVMLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIE9uSW5pdCxcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBhc3N3b3JkU3RyZW5ndGhNZXRlclNlcnZpY2UgfSBmcm9tICcuL3Bhc3N3b3JkLXN0cmVuZ3RoLW1ldGVyLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwYXNzd29yZC1zdHJlbmd0aC1tZXRlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9wYXNzd29yZC1zdHJlbmd0aC1tZXRlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3Bhc3N3b3JkLXN0cmVuZ3RoLW1ldGVyLmNvbXBvbmVudC5zY3NzJ10sXG4gIHByb3ZpZGVyczogW1Bhc3N3b3JkU3RyZW5ndGhNZXRlclNlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkU3RyZW5ndGhNZXRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgcGFzc3dvcmQ6IHN0cmluZztcblxuICBASW5wdXQoKSBtaW5QYXNzd29yZExlbmd0aCA9IDg7XG5cbiAgQElucHV0KCkgZW5hYmxlRmVlZGJhY2sgPSBmYWxzZTtcblxuICBASW5wdXQoKSBjb2xvcnM6IHN0cmluZ1tdID0gW107XG5cbiAgQE91dHB1dCgpIHN0cmVuZ3RoQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG5cbiAgcGFzc3dvcmRTdHJlbmd0aDogbnVtYmVyID0gbnVsbDtcblxuICBmZWVkYmFjazogeyBzdWdnZXN0aW9uczogc3RyaW5nW107IHdhcm5pbmc6IHN0cmluZyB9ID0gbnVsbDtcblxuICBwcml2YXRlIHByZXZQYXNzd29yZFN0cmVuZ3RoID0gbnVsbDtcblxuICBwcml2YXRlIGRlZmF1bHRDb2xvdXJzID0gW1xuICAgICdkYXJrcmVkJyxcbiAgICAnb3JhbmdlcmVkJyxcbiAgICAnb3JhbmdlJyxcbiAgICAneWVsbG93Z3JlZW4nLFxuICAgICdncmVlbidcbiAgXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHBhc3N3b3JkU3RyZW5ndGhNZXRlclNlcnZpY2U6IFBhc3N3b3JkU3RyZW5ndGhNZXRlclNlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMucGFzc3dvcmQpIHtcbiAgICAgIHRoaXMuY2FsY3VsYXRlUGFzc3dvcmRTdHJlbmd0aCgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlUGFzc3dvcmRTdHJlbmd0aCgpIHtcbiAgICAvLyBUT0RPIHZhbGlkYXRpb24gbG9naWMgb3B0aW1pemF0aW9uXG4gICAgaWYgKCF0aGlzLnBhc3N3b3JkKSB7XG4gICAgICB0aGlzLnBhc3N3b3JkU3RyZW5ndGggPSBudWxsO1xuICAgICAgdGhpcy5mZWVkYmFjayA9IG51bGw7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBhc3N3b3JkICYmIHRoaXMucGFzc3dvcmQubGVuZ3RoIDwgdGhpcy5taW5QYXNzd29yZExlbmd0aCkge1xuICAgICAgdGhpcy5wYXNzd29yZFN0cmVuZ3RoID0gMDtcbiAgICAgIHRoaXMuZmVlZGJhY2sgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5lbmFibGVGZWVkYmFjaykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnBhc3N3b3JkU3RyZW5ndGhNZXRlclNlcnZpY2Uuc2NvcmVXaXRoRmVlZGJhY2soXG4gICAgICAgICAgdGhpcy5wYXNzd29yZFxuICAgICAgICApO1xuICAgICAgICB0aGlzLnBhc3N3b3JkU3RyZW5ndGggPSByZXN1bHQuc2NvcmU7XG4gICAgICAgIHRoaXMuZmVlZGJhY2sgPSByZXN1bHQuZmVlZGJhY2s7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBhc3N3b3JkU3RyZW5ndGggPSB0aGlzLnBhc3N3b3JkU3RyZW5ndGhNZXRlclNlcnZpY2Uuc2NvcmUoXG4gICAgICAgICAgdGhpcy5wYXNzd29yZFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmZlZWRiYWNrID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPbmx5IGVtaXQgdGhlIHBhc3N3b3JkU3RyZW5ndGggaWYgaXQgY2hhbmdlZFxuICAgIGlmICh0aGlzLnByZXZQYXNzd29yZFN0cmVuZ3RoICE9PSB0aGlzLnBhc3N3b3JkU3RyZW5ndGgpIHtcbiAgICAgIHRoaXMuc3RyZW5ndGhDaGFuZ2UuZW1pdCh0aGlzLnBhc3N3b3JkU3RyZW5ndGgpO1xuICAgICAgdGhpcy5wcmV2UGFzc3dvcmRTdHJlbmd0aCA9IHRoaXMucGFzc3dvcmRTdHJlbmd0aDtcbiAgICB9XG4gIH1cblxuICBnZXRNZXRlckZpbGxDb2xvcihzdHJlbmd0aCkge1xuICAgIGlmICghc3RyZW5ndGggfHwgc3RyZW5ndGggPCAwIHx8IHN0cmVuZ3RoID4gNSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29sb3JzWzBdID8gdGhpcy5jb2xvcnNbMF0gOiB0aGlzLmRlZmF1bHRDb2xvdXJzWzBdO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNvbG9yc1tzdHJlbmd0aF1cbiAgICAgID8gdGhpcy5jb2xvcnNbc3RyZW5ndGhdXG4gICAgICA6IHRoaXMuZGVmYXVsdENvbG91cnNbc3RyZW5ndGhdO1xuICB9XG59XG4iXX0=